<?xml version="1.0" encoding="utf-8"?>
<TestRecord xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Results>
    <UnitTestResult>
      <TestDate>2009-04-01T21:18:54+01:00</TestDate>
      <Status>Success Failure Ignored</Status>
      <TotalFailures>21</TotalFailures>
      <TotalSuccess>30</TotalSuccess>
      <TotalIgnored>3</TotalIgnored>
      <Time />
    </UnitTestResult>
  </Results>
  <Tests>
    <TestRecord Name="Test">
      <Results>
        <UnitTestResult>
          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
          <Status>Success Failure Ignored</Status>
          <TotalFailures>21</TotalFailures>
          <TotalSuccess>30</TotalSuccess>
          <TotalIgnored>3</TotalIgnored>
          <Time />
        </UnitTestResult>
      </Results>
      <Tests>
        <TestRecord Name="CraigFowler">
          <Results>
            <UnitTestResult>
              <TestDate>2009-04-01T21:18:52+01:00</TestDate>
              <Status>Failure</Status>
              <TotalFailures>0</TotalFailures>
              <TotalSuccess>0</TotalSuccess>
              <TotalIgnored>0</TotalIgnored>
              <Time />
              <Message>Argument is out of range.
Parameter name: startIndex</Message>
              <StackTrace>  at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke (System.Runtime.Remoting.Proxies.RealProxy rp, IMessage msg, System.Exception&amp; exc, System.Object[]&amp; out_args) [0x00000] </StackTrace>
            </UnitTestResult>
            <UnitTestResult>
              <TestDate>2009-04-01T21:18:54+01:00</TestDate>
              <Status>Success Failure Ignored</Status>
              <TotalFailures>21</TotalFailures>
              <TotalSuccess>30</TotalSuccess>
              <TotalIgnored>3</TotalIgnored>
              <Time />
            </UnitTestResult>
          </Results>
          <Tests>
            <TestRecord Name="Diceroller">
              <Results>
                <UnitTestResult>
                  <TestDate>2009-04-01T16:24:01+01:00</TestDate>
                  <Status>Failure</Status>
                  <TotalFailures>0</TotalFailures>
                  <TotalSuccess>0</TotalSuccess>
                  <TotalIgnored>0</TotalIgnored>
                  <Time />
                  <Message>Argument is out of range.
Parameter name: startIndex</Message>
                  <StackTrace>  at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke (System.Runtime.Remoting.Proxies.RealProxy rp, IMessage msg, System.Exception&amp; exc, System.Object[]&amp; out_args) [0x00000] </StackTrace>
                </UnitTestResult>
                <UnitTestResult>
                  <TestDate>2009-04-01T21:18:50+01:00</TestDate>
                  <Status>Failure</Status>
                  <TotalFailures>0</TotalFailures>
                  <TotalSuccess>0</TotalSuccess>
                  <TotalIgnored>0</TotalIgnored>
                  <Time />
                  <Message>Argument is out of range.
Parameter name: startIndex</Message>
                  <StackTrace>  at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke (System.Runtime.Remoting.Proxies.RealProxy rp, IMessage msg, System.Exception&amp; exc, System.Object[]&amp; out_args) [0x00000] </StackTrace>
                </UnitTestResult>
                <UnitTestResult>
                  <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                  <Status>Success Failure Ignored</Status>
                  <TotalFailures>21</TotalFailures>
                  <TotalSuccess>30</TotalSuccess>
                  <TotalIgnored>3</TotalIgnored>
                  <Time />
                </UnitTestResult>
                <UnitTestResult>
                  <TestDate>2009-04-01T23:29:43+01:00</TestDate>
                  <Status>Failure</Status>
                  <TotalFailures>0</TotalFailures>
                  <TotalSuccess>0</TotalSuccess>
                  <TotalIgnored>0</TotalIgnored>
                  <Time />
                  <Message>Argument is out of range.
Parameter name: startIndex</Message>
                  <StackTrace>  at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke (System.Runtime.Remoting.Proxies.RealProxy rp, IMessage msg, System.Exception&amp; exc, System.Object[]&amp; out_args) [0x00000] </StackTrace>
                </UnitTestResult>
              </Results>
              <Tests>
                <TestRecord Name="OtherOptions">
                  <Results>
                    <UnitTestResult>
                      <TestDate>2009-04-01T16:24:04+01:00</TestDate>
                      <Status>Failure</Status>
                      <TotalFailures>5</TotalFailures>
                      <TotalSuccess>0</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>4</TotalFailures>
                      <TotalSuccess>1</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                  </Results>
                  <Tests>
                    <TestRecord Name="ExplodingAddOn">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateRoll () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.OtherOptions.ExplodingAddOn () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '1d4'
Raw group: 1d4
Has numDice: True, has sidesPerDie: True
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateRoll () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.OtherOptions.ExplodingAddOn () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '1d4'
Raw group: 1d4
Has numDice: True, has sidesPerDie: True
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="ExplodingRollAgain">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateRoll () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.OtherOptions.ExplodingRollAgain () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '1d4'
Raw group: 1d4
Has numDice: True, has sidesPerDie: True
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateRoll () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.OtherOptions.ExplodingRollAgain () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '1d4'
Raw group: 1d4
Has numDice: True, has sidesPerDie: True
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="DontExplodeNumbers">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.OtherOptions.DontExplodeNumbers () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False

1 rolls, spec: '5+1'
Raw group: 5
Raw group: +1
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="DontExplodeIfThresholdIsTooLow">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateRoll () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.OtherOptions.DontExplodeIfThresholdIsTooLow () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '1d6'
Raw group: 1d6
Has numDice: True, has sidesPerDie: True
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateRoll () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.OtherOptions.DontExplodeIfThresholdIsTooLow () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '1d6'
Raw group: 1d6
Has numDice: True, has sidesPerDie: True
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="OptionsOnIndividualDiceGroups">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at Test.CraigFowler.Diceroller.OtherOptions.OptionsOnIndividualDiceGroups () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '18/7+3/7'
Raw group: 18
Raw group: /7
Raw group: +3
Raw group: /7
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at Test.CraigFowler.Diceroller.OtherOptions.OptionsOnIndividualDiceGroups () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '18/7+3/7'
Raw group: 18
Raw group: /7
Raw group: +3
Raw group: /7
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                  </Tests>
                </TestRecord>
                <TestRecord Name="Plugins">
                  <Results>
                    <UnitTestResult>
                      <TestDate>2009-04-01T16:24:06+01:00</TestDate>
                      <Status>Failure</Status>
                      <TotalFailures>0</TotalFailures>
                      <TotalSuccess>0</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                      <Message>Argument is out of range.
Parameter name: startIndex</Message>
                      <StackTrace>  at System.Runtime.Remoting.Proxies.RealProxy.PrivateInvoke (System.Runtime.Remoting.Proxies.RealProxy rp, IMessage msg, System.Exception&amp; exc, System.Object[]&amp; out_args) [0x00000] </StackTrace>
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                      <Status>Ignored</Status>
                      <TotalFailures>0</TotalFailures>
                      <TotalSuccess>0</TotalSuccess>
                      <TotalIgnored>3</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                  </Results>
                  <Tests>
                    <TestRecord Name="SR4Dice">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Ignored</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>1</TotalIgnored>
                          <Time />
                        </UnitTestResult>
                      </Results>
                      <Tests>
                        <TestRecord Name="TestCase">
                          <Results>
                            <UnitTestResult>
                              <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                              <Status>Ignored</Status>
                              <TotalFailures>0</TotalFailures>
                              <TotalSuccess>0</TotalSuccess>
                              <TotalIgnored>1</TotalIgnored>
                              <Time />
                              <Message>This test isn't ready yet</Message>
                              <ConsoleOutput />
                              <ConsoleError />
                            </UnitTestResult>
                          </Results>
                          <Tests />
                        </TestRecord>
                      </Tests>
                    </TestRecord>
                    <TestRecord Name="FudgeDice">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Ignored</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>1</TotalIgnored>
                          <Time />
                        </UnitTestResult>
                      </Results>
                      <Tests>
                        <TestRecord Name="TestCase">
                          <Results>
                            <UnitTestResult>
                              <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                              <Status>Ignored</Status>
                              <TotalFailures>0</TotalFailures>
                              <TotalSuccess>0</TotalSuccess>
                              <TotalIgnored>1</TotalIgnored>
                              <Time />
                              <Message>This test isn't ready yet</Message>
                              <ConsoleOutput />
                              <ConsoleError />
                            </UnitTestResult>
                          </Results>
                          <Tests />
                        </TestRecord>
                      </Tests>
                    </TestRecord>
                    <TestRecord Name="DnDStats">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Ignored</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>1</TotalIgnored>
                          <Time />
                        </UnitTestResult>
                      </Results>
                      <Tests>
                        <TestRecord Name="TestCase">
                          <Results>
                            <UnitTestResult>
                              <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                              <Status>Ignored</Status>
                              <TotalFailures>0</TotalFailures>
                              <TotalSuccess>0</TotalSuccess>
                              <TotalIgnored>1</TotalIgnored>
                              <Time />
                              <Message>This test isn't ready yet</Message>
                              <ConsoleOutput />
                              <ConsoleError />
                            </UnitTestResult>
                          </Results>
                          <Tests />
                        </TestRecord>
                      </Tests>
                    </TestRecord>
                  </Tests>
                </TestRecord>
                <TestRecord Name="RoundingTests">
                  <Results>
                    <UnitTestResult>
                      <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                      <Status>Failure</Status>
                      <TotalFailures>11</TotalFailures>
                      <TotalSuccess>0</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                      <Status>Failure</Status>
                      <TotalFailures>11</TotalFailures>
                      <TotalSuccess>0</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                  </Results>
                  <Tests>
                    <TestRecord Name="RoundUpInteger">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundUpInteger () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '7/3'
Raw group: 7
Raw group: /3
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Real result = 2 1/3
Array lengths are both 1.
Arrays differ at index 0.
	expected: &lt;3&gt;
	 but was: &lt;2.3333333333333333333333333333&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundUpInteger () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '7/3'
Raw group: 7
Raw group: /3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="RoundDownInteger">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundDownInteger () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '7/3'
Raw group: 7
Raw group: /3
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Real result = 2 1/3
Array lengths are both 1.
Arrays differ at index 0.
	expected: &lt;2&gt;
	 but was: &lt;2.3333333333333333333333333333&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundDownInteger () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '7/3'
Raw group: 7
Raw group: /3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="RoundAwayFromZeroInteger">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundAwayFromZeroInteger () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '7/3'
Raw group: 7
Raw group: /3
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Real result = 2 1/3
Array lengths are both 1.
Arrays differ at index 0.
	expected: &lt;2&gt;
	 but was: &lt;2.3333333333333333333333333333&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundAwayFromZeroInteger () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '7/3'
Raw group: 7
Raw group: /3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="RoundToEvenInteger">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundToEvenInteger () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '7/3'
Raw group: 7
Raw group: /3
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Real result = 2 1/3
Array lengths are both 1.
Arrays differ at index 0.
	expected: &lt;2&gt;
	 but was: &lt;2.3333333333333333333333333333&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundToEvenInteger () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '7/3'
Raw group: 7
Raw group: /3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="RoundUpDecimal">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundUpDecimal () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '(7/3)/10'
Raw group: (7
Raw group: /3)
Raw group: /10
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Real result = 0.2333
Array lengths are both 1.
Arrays differ at index 0.
	expected: &lt;0.24&gt;
	 but was: &lt;0.7000000000000000000000000000&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundUpDecimal () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '(7/3)/10'
Raw group: (7
Raw group: /3)
Raw group: /10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="RoundDownDecimal">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundDownDecimal () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '(7/3)/10'
Raw group: (7
Raw group: /3)
Raw group: /10
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Real result = 0.2333
Array lengths are both 1.
Arrays differ at index 0.
	expected: &lt;0.23&gt;
	 but was: &lt;0.7000000000000000000000000000&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundDownDecimal () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '(7/3)/10'
Raw group: (7
Raw group: /3)
Raw group: /10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="RoundAwayFromZeroDecimal">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundAwayFromZeroDecimal () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '(7/3)/10'
Raw group: (7
Raw group: /3)
Raw group: /10
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Real result = 0.2333
Array lengths are both 1.
Arrays differ at index 0.
	expected: &lt;0.23&gt;
	 but was: &lt;0.7000000000000000000000000000&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundAwayFromZeroDecimal () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '(7/3)/10'
Raw group: (7
Raw group: /3)
Raw group: /10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="RoundToEvenDecimal">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundToEvenDecimal () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '(7/3)/10'
Raw group: (7
Raw group: /3)
Raw group: /10
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Real result = 0.2333
Array lengths are both 1.
Arrays differ at index 0.
	expected: &lt;0.23&gt;
	 but was: &lt;0.7000000000000000000000000000&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundToEvenDecimal () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '(7/3)/10'
Raw group: (7
Raw group: /3)
Raw group: /10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="LowerBound">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateRoll () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.LowerBound () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '1d6'
Raw group: 1d6
Has numDice: True, has sidesPerDie: True
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateRoll () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.LowerBound () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '1d6'
Raw group: 1d6
Has numDice: True, has sidesPerDie: True
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="UpperBound">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateRoll () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.UpperBound () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '1d6'
Raw group: 1d6
Has numDice: True, has sidesPerDie: True
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NullReferenceException : Object reference not set to an instance of an object</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateRoll () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.UpperBound () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '1d6'
Raw group: 1d6
Has numDice: True, has sidesPerDie: True
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="RoundEveryStep">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:07+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundEveryStep () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2/7+9/5+10/12'
Raw group: 2
Raw group: /7
Raw group: +9
Raw group: /5
Raw group: +10
Raw group: /12
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Round up every step
Array lengths are both 1.
Arrays differ at index 0.
	expected: &lt;4&gt;
	 but was: &lt;2.9190476190476190476190476190&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message) [0x00000] 
  at Test.CraigFowler.Diceroller.RoundingTests.RoundEveryStep () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2/7+9/5+10/12'
Raw group: 2
Raw group: /7
Raw group: +9
Raw group: /5
Raw group: +10
Raw group: /12
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                  </Tests>
                </TestRecord>
                <TestRecord Name="SimpleNumbers">
                  <Results>
                    <UnitTestResult>
                      <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                      <Status>Failure</Status>
                      <TotalFailures>13</TotalFailures>
                      <TotalSuccess>0</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                      <Status>Failure</Status>
                      <TotalFailures>13</TotalFailures>
                      <TotalSuccess>0</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                      <Status>Failure</Status>
                      <TotalFailures>13</TotalFailures>
                      <TotalSuccess>0</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                      <Status>Failure</Status>
                      <TotalFailures>13</TotalFailures>
                      <TotalSuccess>0</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                      <Status>Failure</Status>
                      <TotalFailures>13</TotalFailures>
                      <TotalSuccess>0</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>12</TotalFailures>
                      <TotalSuccess>1</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>12</TotalFailures>
                      <TotalSuccess>1</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>12</TotalFailures>
                      <TotalSuccess>1</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>12</TotalFailures>
                      <TotalSuccess>1</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>12</TotalFailures>
                      <TotalSuccess>1</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>12</TotalFailures>
                      <TotalSuccess>1</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>6</TotalFailures>
                      <TotalSuccess>7</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>6</TotalFailures>
                      <TotalSuccess>7</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>6</TotalFailures>
                      <TotalSuccess>7</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>6</TotalFailures>
                      <TotalSuccess>7</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>6</TotalFailures>
                      <TotalSuccess>7</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>5</TotalFailures>
                      <TotalSuccess>8</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>5</TotalFailures>
                      <TotalSuccess>8</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>4</TotalFailures>
                      <TotalSuccess>9</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:41:24</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>4</TotalFailures>
                      <TotalSuccess>9</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:43:25</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>6</TotalFailures>
                      <TotalSuccess>7</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:43:38</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>4</TotalFailures>
                      <TotalSuccess>9</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:44:52</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>4</TotalFailures>
                      <TotalSuccess>9</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:46:04</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>4</TotalFailures>
                      <TotalSuccess>9</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:47:14</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>4</TotalFailures>
                      <TotalSuccess>9</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:52:07</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>2</TotalFailures>
                      <TotalSuccess>11</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:52:48</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>1</TotalFailures>
                      <TotalSuccess>12</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:55:23</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>1</TotalFailures>
                      <TotalSuccess>12</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:56:40</TestDate>
                      <Status>Success Failure</Status>
                      <TotalFailures>1</TotalFailures>
                      <TotalSuccess>12</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                  </Results>
                  <Tests>
                    <TestRecord Name="SimpleNumber">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.SimpleNumber () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.SimpleNumber () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.SimpleNumber () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.SimpleNumber () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;43&gt;
	 but was: &lt;System.Decimal[]&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (System.Object expected, System.Object actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.SimpleNumber () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:33+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '43'
Raw group: 43
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Output for this group is 43
Output for this group is 43
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '43'

Rolling Spec: '43'
Output for this group is 43
Output for this group is 43
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '43'

Rolling Spec: '43'
Output for this group is 43
Output for this group is 43
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '43'

Rolling Spec: '43'
Output for this group is 43
Output for this group is 43
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '43'

Rolling Spec: '43'
Output for this group is 43
Output for this group is 43
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '43'

Rolling Spec: '43'
Output for this group is 43
Output for this group is 43
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="Addition">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 2 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Addition () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+8+2+10'
Raw group: 2
Raw group: +8
Raw group: +2
Raw group: +10
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Output for this group is 2
Output for this group is 8
Output for this group is 2
Output for this group is 10
Output for this group is 22
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2+8+2+10'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '+8'
Output for this group is 8

Rolling Spec: '+2'
Output for this group is 2

Rolling Spec: '+10'
Output for this group is 10
Output for this group is 22
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2+8+2+10'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '+8'
Output for this group is 8

Rolling Spec: '+2'
Output for this group is 2

Rolling Spec: '+10'
Output for this group is 10
Output for this group is 22
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2+8+2+10'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '+8'
Output for this group is 8

Rolling Spec: '+2'
Output for this group is 2

Rolling Spec: '+10'
Output for this group is 10
Output for this group is 22
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2+8+2+10'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '+8'
Output for this group is 8

Rolling Spec: '+2'
Output for this group is 2

Rolling Spec: '+10'
Output for this group is 10
Output for this group is 22
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2+8+2+10'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '+8'
Output for this group is 8

Rolling Spec: '+2'
Output for this group is 2

Rolling Spec: '+10'
Output for this group is 10
Output for this group is 22
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="Subtraction">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 2 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:39:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;13&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '-9-4'
Raw group: -9
Raw group: -4
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>Output for this group is 9
Output for this group is 4
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '-9-4'

Rolling Spec: '-9'
Output for this group is 9

Rolling Spec: '-4'
Output for this group is 4
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:49:41</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-13&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Subtraction () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '-9-4'

Rolling Spec: '-9'
Output for this group is 9

Rolling Spec: '-4'
Output for this group is 4
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '-9-4'

Rolling Spec: '-9'
Output for this group is 9

Rolling Spec: '-4'
Output for this group is 4
Output for this group is -13
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '-9-4'

Rolling Spec: '-9'
Output for this group is 9

Rolling Spec: '-4'
Output for this group is 4
Output for this group is -13
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '-9-4'

Rolling Spec: '-9'
Output for this group is 9

Rolling Spec: '-4'
Output for this group is 4
Output for this group is -13
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '-9-4'

Rolling Spec: '-9'
Output for this group is 9

Rolling Spec: '-4'
Output for this group is 4
Output for this group is -13
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="Multiplication">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 2 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Multiplication () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4x5'
Raw group: 4
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Output for this group is 4
Output for this group is 5
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*5'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*5'
Output for this group is 5
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*5'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*5'
Output for this group is 5
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*5'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*5'
Output for this group is 5
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*5'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*5'
Output for this group is 5
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*5'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*5'
Output for this group is 5
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="Division">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 2 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;0.375&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;0.375&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;0.375&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:20:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;0.375&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;0.375&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:21:20+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;0.375&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;0.375&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Division () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '6/2x8'
Raw group: 6
Raw group: /2
Raw group: x8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Output for this group is 6
Output for this group is 2
Output for this group is 8
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '6/2*8'

Rolling Spec: '6'
Output for this group is 6

Rolling Spec: '/2'
Output for this group is 2

Rolling Spec: '*8'
Output for this group is 8
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '6/2*8'

Rolling Spec: '6'
Output for this group is 6

Rolling Spec: '/2'
Output for this group is 2

Rolling Spec: '*8'
Output for this group is 8
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '6/2*8'

Rolling Spec: '6'
Output for this group is 6

Rolling Spec: '/2'
Output for this group is 2

Rolling Spec: '*8'
Output for this group is 8
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '6/2*8'

Rolling Spec: '6'
Output for this group is 6

Rolling Spec: '/2'
Output for this group is 2

Rolling Spec: '*8'
Output for this group is 8
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '6/2*8'

Rolling Spec: '6'
Output for this group is 6

Rolling Spec: '/2'
Output for this group is 2

Rolling Spec: '*8'
Output for this group is 8
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="MultiplicationSynonyms">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 2 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.MultiplicationSynonyms () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x2*2x5'
Raw group: 2
Raw group: x2
Raw group: *2
Raw group: x5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Output for this group is 2
Output for this group is 2
Output for this group is 2
Output for this group is 5
Output for this group is 40
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2*2*2*5'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '*5'
Output for this group is 5
Output for this group is 40
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2*2*2*5'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '*5'
Output for this group is 5
Output for this group is 40
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2*2*2*5'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '*5'
Output for this group is 5
Output for this group is 40
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2*2*2*5'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '*5'
Output for this group is 5
Output for this group is 40
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2*2*2*5'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '*5'
Output for this group is 5
Output for this group is 40
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="OrderOfOperations">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 2 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:21:09+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;5&gt;
	 but was: &lt;15&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.OrderOfOperations () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3+8/2-5'
Raw group: 2
Raw group: x3
Raw group: +8
Raw group: /2
Raw group: -5
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Output for this group is 2
Output for this group is 3
Output for this group is 8
Output for this group is 2
Output for this group is 5
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2*3+8/2-5'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '*3'
Output for this group is 3

Rolling Spec: '+8'
Output for this group is 8

Rolling Spec: '/2'
Output for this group is 2

Rolling Spec: '-5'
Output for this group is 5
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2*3+8/2-5'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '*3'
Output for this group is 3

Rolling Spec: '+8'
Output for this group is 8

Rolling Spec: '/2'
Output for this group is 2

Rolling Spec: '-5'
Output for this group is 5
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2*3+8/2-5'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '*3'
Output for this group is 3

Rolling Spec: '+8'
Output for this group is 8

Rolling Spec: '/2'
Output for this group is 2

Rolling Spec: '-5'
Output for this group is 5
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2*3+8/2-5'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '*3'
Output for this group is 3

Rolling Spec: '+8'
Output for this group is 8

Rolling Spec: '/2'
Output for this group is 2

Rolling Spec: '-5'
Output for this group is 5
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '2*3+8/2-5'

Rolling Spec: '2'
Output for this group is 2

Rolling Spec: '*3'
Output for this group is 3

Rolling Spec: '+8'
Output for this group is 8

Rolling Spec: '/2'
Output for this group is 2

Rolling Spec: '-5'
Output for this group is 5
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="WhitespaceIgnored">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 2 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;-2&gt;
	 but was: &lt;22&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.WhitespaceIgnored () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10-6*2'
Raw group: 10
Raw group: -6
Raw group: *2
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Output for this group is 10
Output for this group is 6
Output for this group is 2
Output for this group is -2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '10-6*2'

Rolling Spec: '10'
Output for this group is 10

Rolling Spec: '-6'
Output for this group is 6

Rolling Spec: '*2'
Output for this group is 2
Output for this group is -2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '10-6*2'

Rolling Spec: '10'
Output for this group is 10

Rolling Spec: '-6'
Output for this group is 6

Rolling Spec: '*2'
Output for this group is 2
Output for this group is -2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '10-6*2'

Rolling Spec: '10'
Output for this group is 10

Rolling Spec: '-6'
Output for this group is 6

Rolling Spec: '*2'
Output for this group is 2
Output for this group is -2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '10-6*2'

Rolling Spec: '10'
Output for this group is 10

Rolling Spec: '-6'
Output for this group is 6

Rolling Spec: '*2'
Output for this group is 2
Output for this group is -2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '10-6*2'

Rolling Spec: '10'
Output for this group is 10

Rolling Spec: '-6'
Output for this group is 6

Rolling Spec: '*2'
Output for this group is 2
Output for this group is -2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="Brackets">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 2 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:38+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:21:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:22:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:31:00+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;20&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:17+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:42:36</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:23</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:45</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(5-2)'
Raw group: 4
Raw group: *(5
Raw group: -2)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>Output for this group is 4
Output for this group is 2
Output for this group is 7
Output for this group is 28
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:10</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>Output for this group is 4
Output for this group is 2
Output for this group is 7
Output for this group is 28
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '4*(5-2)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(5-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 7
Output for this group is 28
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:48:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;12&gt;
	 but was: &lt;28&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.Brackets () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '4*(5-2)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(5-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 7
Output for this group is 28
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*(5-2)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(5-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 3
Output for this group is 12
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*(5-2)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(5-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 3
Output for this group is 12
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*(5-2)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(5-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 3
Output for this group is 12
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*(5-2)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(5-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 3
Output for this group is 12
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="InvalidOperationRecovered">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 2 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.InvalidOperationRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '3**4+8'
Raw group: 3
Raw group: **4
Raw group: +8
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Output for this group is 3
Output for this group is 4
Output for this group is 8
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '3*4+8'

Rolling Spec: '3'
Output for this group is 3

Rolling Spec: '*4'
Output for this group is 4

Rolling Spec: '+8'
Output for this group is 8
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '3*4+8'

Rolling Spec: '3'
Output for this group is 3

Rolling Spec: '*4'
Output for this group is 4

Rolling Spec: '+8'
Output for this group is 8
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '3*4+8'

Rolling Spec: '3'
Output for this group is 3

Rolling Spec: '*4'
Output for this group is 4

Rolling Spec: '+8'
Output for this group is 8
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '3*4+8'

Rolling Spec: '3'
Output for this group is 3

Rolling Spec: '*4'
Output for this group is 4

Rolling Spec: '+8'
Output for this group is 8
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '3*4+8'

Rolling Spec: '3'
Output for this group is 3

Rolling Spec: '*4'
Output for this group is 4

Rolling Spec: '+8'
Output for this group is 8
Output for this group is 20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="BracketsNotClosedRecovered">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.ArgumentOutOfRangeException : Argument is out of range.
Parameter name: index</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 2 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;12&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;12&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;12&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;12&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;12&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:34+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;12&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;12&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;12&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:31:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;24&gt;
	 but was: &lt;12&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsNotClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4*(3+3'
Raw group: 4
Raw group: *(3
Raw group: +3
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>Output for this group is 4
Output for this group is 3
Output for this group is 6
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*(3+3)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(3+3)'

Rolling Spec: '+3'
Output for this group is 3
Output for this group is 6
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*(3+3)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(3+3)'

Rolling Spec: '+3'
Output for this group is 3
Output for this group is 6
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*(3+3)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(3+3)'

Rolling Spec: '+3'
Output for this group is 3
Output for this group is 6
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*(3+3)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(3+3)'

Rolling Spec: '+3'
Output for this group is 3
Output for this group is 6
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '4*(3+3)'

Rolling Spec: '4'
Output for this group is 4

Rolling Spec: '*(3+3)'

Rolling Spec: '+3'
Output for this group is 3
Output for this group is 6
Output for this group is 24
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="BracketsTooManyClosedRecovered">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.NotImplementedException : The requested feature is not implemented.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.FormatException : Input string was not in a correct format.</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:31:27+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '20/(7-2))'
Raw group: 20
Raw group: /(7
Raw group: -2)
Raw group: )
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>Output for this group is 20
Output for this group is 2
Output for this group is 9
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '20/(7-2)'

Rolling Spec: '20'
Output for this group is 20

Rolling Spec: '/(7-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 9

Rolling Spec: ''
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '20/(7-2)'

Rolling Spec: '20'
Output for this group is 20

Rolling Spec: '/(7-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 5

Rolling Spec: ''
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Something is wrong here, I have 0 results when I was expecting only 1.</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '20/(7-2)'

Rolling Spec: '20'
Output for this group is 20

Rolling Spec: '/(7-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 5

Rolling Spec: ''
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '20/(7-2)'

Rolling Spec: '20'
Output for this group is 20

Rolling Spec: '/(7-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 5

Rolling Spec: ''
Output for this group is 0
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:57</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '20/(7-2)'

Rolling Spec: '20'
Output for this group is 20

Rolling Spec: '/(7-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 5

Rolling Spec: ''
Output for this group is 0
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>System.InvalidOperationException : Operator has not been set yet</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.BracketsTooManyClosedRecovered () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '20/(7-2)'

Rolling Spec: '20'
Output for this group is 20

Rolling Spec: '/(7-2)'

Rolling Spec: '-2'
Output for this group is 2
Output for this group is 5

Rolling Spec: ''
Output for this group is 0
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="DivisionByZeroError">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:08+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.NotImplementedException</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:13+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.NotImplementedException</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:26:26+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.InvalidOperationException</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:27:47+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.InvalidOperationException</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.get_Operator () [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:01:14+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.ArgumentOutOfRangeException</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T19:02:51+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.ArgumentOutOfRangeException</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:03:10+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.ArgumentOutOfRangeException</Message>
                          <StackTrace>  at System.Collections.Generic.List`1[CraigFowler.Diceroller.DiceGroup+DiceResult].get_Item (Int32 index) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:14:36+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.InvalidOperationException</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T20:16:24+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.FormatException</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:18+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.FormatException</Message>
                          <StackTrace>  at System.String.ParseFormatSpecifier (System.String str, System.Int32&amp; ptr, System.Int32&amp; n, System.Int32&amp; width, System.Boolean&amp; left_align, System.String&amp; format) [0x00000] 
  at System.String.FormatHelper (System.Text.StringBuilder result, IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (IFormatProvider provider, System.String format, System.Object[] args) [0x00000] 
  at System.String.Format (System.String format, System.Object arg0) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:17:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected: System.DivideByZeroException but was System.InvalidOperationException</Message>
                          <StackTrace>  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:31+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;9.999999999999999999999999999&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;9.999999999999999999999999999&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:19:01+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;9.999999999999999999999999999&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T22:20:55+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;9.999999999999999999999999999&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:04+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;9.999999999999999999999999999&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:26:16+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;9.999999999999999999999999999&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:32+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;10&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:29:45+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;10&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:31:48+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;10&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:38:01+01:00</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:41:24</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:25</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:43:38</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
1 rolls, spec: '30*2/(6-6)'
Raw group: 30
Raw group: *2
Raw group: /(6
Raw group: -6)
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:44:52</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
Has numDice: True, has sidesPerDie: False
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:46:04</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>Output for this group is 30
Output for this group is 2
Output for this group is 6
Output for this group is 12
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:47:14</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>
	expected: &lt;0&gt;
	 but was: &lt;5&gt;</Message>
                          <StackTrace>  at NUnit.Framework.Assert.DoAssert (IAsserter asserter) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual, System.String message, System.Object[] args) [0x00000] 
  at NUnit.Framework.Assert.AreEqual (Decimal expected, Decimal actual) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '30*2/(6-6)'

Rolling Spec: '30'
Output for this group is 30

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '/(6-6)'

Rolling Spec: '-6'
Output for this group is 6
Output for this group is 12
Output for this group is 5
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:07</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected exception to have message: "Error: Division by zero!" but received message "Division by zero"</Message>
                          <StackTrace>  at System.Decimal.Divide (Decimal d1, Decimal d2) [0x00000] 
  at System.Decimal.op_Division (Decimal d1, Decimal d2) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '30*2/(6-6)'

Rolling Spec: '30'
Output for this group is 30

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '/(6-6)'

Rolling Spec: '-6'
Output for this group is 6
Output for this group is 0
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:16</TestDate>
                          <Status>Failure</Status>
                          <TotalFailures>1</TotalFailures>
                          <TotalSuccess>0</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <Message>Expected exception to have message: "Error: Division by zero!" but received message "Division by zero"</Message>
                          <StackTrace>  at System.Decimal.Divide (Decimal d1, Decimal d2) [0x00000] 
  at System.Decimal.op_Division (Decimal d1, Decimal d2) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.calculateValue (System.Int32&amp; explosions, Boolean ignoreCachedResults) [0x00000] 
  at CraigFowler.Diceroller.DiceGroup.GetValue (System.Int32&amp; rollAgainExplosions, Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.roll (Boolean reRoll) [0x00000] 
  at CraigFowler.Diceroller.DiceSpecification.Roll () [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.rollDice (CraigFowler.Diceroller.DiceSpecification spec) [0x00000] 
  at CraigFowler.Diceroller.CoreDiceRoller.Roll (System.String specString) [0x00000] 
  at Test.CraigFowler.Diceroller.SimpleNumbers.DivisionByZeroError () [0x00000] 
  at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (object,object[])
  at System.Reflection.MonoMethod.Invoke (System.Object obj, BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00000] </StackTrace>
                          <ConsoleOutput>
Rolling Spec: '30*2/(6-6)'

Rolling Spec: '30'
Output for this group is 30

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '/(6-6)'

Rolling Spec: '-6'
Output for this group is 6
Output for this group is 0
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:52:48</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '30*2/(6-6)'

Rolling Spec: '30'
Output for this group is 30

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '/(6-6)'

Rolling Spec: '-6'
Output for this group is 6
Output for this group is 0
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:55:23</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '30*2/(6-6)'

Rolling Spec: '30'
Output for this group is 30

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '/(6-6)'

Rolling Spec: '-6'
Output for this group is 6
Output for this group is 0
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:40</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
Rolling Spec: '30*2/(6-6)'

Rolling Spec: '30'
Output for this group is 30

Rolling Spec: '*2'
Output for this group is 2

Rolling Spec: '/(6-6)'

Rolling Spec: '-6'
Output for this group is 6
Output for this group is 0
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                  </Tests>
                </TestRecord>
                <TestRecord Name="SpecificationParsing">
                  <Results>
                    <UnitTestResult>
                      <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                      <Status>Success</Status>
                      <TotalFailures>0</TotalFailures>
                      <TotalSuccess>22</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                      <Status>Success</Status>
                      <TotalFailures>0</TotalFailures>
                      <TotalSuccess>22</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                      <Status>Success</Status>
                      <TotalFailures>0</TotalFailures>
                      <TotalSuccess>22</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                    <UnitTestResult>
                      <TestDate>2009-04-01T23:56:38</TestDate>
                      <Status>Success</Status>
                      <TotalFailures>0</TotalFailures>
                      <TotalSuccess>22</TotalSuccess>
                      <TotalIgnored>0</TotalIgnored>
                      <Time />
                    </UnitTestResult>
                  </Results>
                  <Tests>
                    <TestRecord Name="PlainNumber">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '1'
Raw group: 1
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '1'
Raw group: 1
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '1'
Raw group: 1
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="AddedNumbers">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+3+4'
Raw group: 2
Raw group: +3
Raw group: +4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+3+4'
Raw group: 2
Raw group: +3
Raw group: +4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2+3+4'
Raw group: 2
Raw group: +3
Raw group: +4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="ManyOperators">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3-4/2'
Raw group: 2
Raw group: x3
Raw group: -4
Raw group: /2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3-4/2'
Raw group: 2
Raw group: x3
Raw group: -4
Raw group: /2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2x3-4/2'
Raw group: 2
Raw group: x3
Raw group: -4
Raw group: /2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="Brackets">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '(1+3)*2'
Raw group: (1
Raw group: +3)
Raw group: *2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '(1+3)*2'
Raw group: (1
Raw group: +3)
Raw group: *2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '(1+3)*2'
Raw group: (1
Raw group: +3)
Raw group: *2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="Whitespace">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '8/4+2'
Raw group: 8
Raw group: /4
Raw group: +2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '8/4+2'
Raw group: 8
Raw group: /4
Raw group: +2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '8/4+2'
Raw group: 8
Raw group: /4
Raw group: +2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="NormalDiceRoll">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2d6'
Raw group: 2d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2d6'
Raw group: 2d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2d6'
Raw group: 2d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="MultipleDiceRoll">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '1d20-1d4x2'
Raw group: 1d20
Raw group: -1d4
Raw group: x2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '1d20-1d4x2'
Raw group: 1d20
Raw group: -1d4
Raw group: x2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '1d20-1d4x2'
Raw group: 1d20
Raw group: -1d4
Raw group: x2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="DPercentage">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '1d%'
Raw group: 1d%
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '1d%'
Raw group: 1d%
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '1d%'
Raw group: 1d%
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="OmitNumberOfDice">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: 'd6+d4'
Raw group: d6
Raw group: +d4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: 'd6+d4'
Raw group: d6
Raw group: +d4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: 'd6+d4'
Raw group: d6
Raw group: +d4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="DoubleBrackets">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2*((3d6+4)*2-3)'
Raw group: 2
Raw group: *(
Raw group: (3d6
Raw group: +4)
Raw group: *2
Raw group: -3)
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2*((3d6+4)*2-3)'
Raw group: 2
Raw group: *(
Raw group: (3d6
Raw group: +4)
Raw group: *2
Raw group: -3)
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2*((3d6+4)*2-3)'
Raw group: 2
Raw group: *(
Raw group: (3d6
Raw group: +4)
Raw group: *2
Raw group: -3)
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="TooManyOpeningBrackets">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '(20+2'
Raw group: (20
Raw group: +2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '(20+2'
Raw group: (20
Raw group: +2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '(20+2'
Raw group: (20
Raw group: +2
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="TooManyClosingBrackets">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4d6+1)'
Raw group: 4d6
Raw group: +1)
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4d6+1)'
Raw group: 4d6
Raw group: +1)
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4d6+1)'
Raw group: 4d6
Raw group: +1)
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="AdjacentOperations">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '20-*2d6'
Raw group: 20
Raw group: -*2d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '20-*2d6'
Raw group: 20
Raw group: -*2d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '20-*2d6'
Raw group: 20
Raw group: -*2d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="LeadingMultiplication">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: 'x20'
Raw group: x20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: 'x20'
Raw group: x20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: 'x20'
Raw group: x20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="MissingOperation">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4+3(4-2)'
Raw group: 4
Raw group: +3
Raw group: (4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4+3(4-2)'
Raw group: 4
Raw group: +3
Raw group: (4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4+3(4-2)'
Raw group: 4
Raw group: +3
Raw group: (4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="InvalidCharacters">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2ad6+34'
Raw group: 2
Raw group: d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2ad6+34'
Raw group: 2
Raw group: d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '2ad6+34'
Raw group: 2
Raw group: d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="WhitespaceInNumbers">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '34+1d4'
Raw group: 34
Raw group: +1d4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '34+1d4'
Raw group: 34
Raw group: +1d4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '34+1d4'
Raw group: 34
Raw group: +1d4
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="MultipleRolls">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
4 rolls, spec: '2d6'
Raw group: 2d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
4 rolls, spec: '2d6'
Raw group: 2d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
4 rolls, spec: '2d6'
Raw group: 2d6
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="MultipleRollsComplex">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
32 rolls, spec: '3d8*2+20'
Raw group: 3d8
Raw group: *2
Raw group: +20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
32 rolls, spec: '3d8*2+20'
Raw group: 3d8
Raw group: *2
Raw group: +20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
32 rolls, spec: '3d8*2+20'
Raw group: 3d8
Raw group: *2
Raw group: +20
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="LotsOfBrackets">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '5+(((5-4)*2))+9'
Raw group: 5
Raw group: +(
Raw group: (
Raw group: (5
Raw group: -4)
Raw group: *2)
Raw group: )
Raw group: +9
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '5+(((5-4)*2))+9'
Raw group: 5
Raw group: +(
Raw group: (
Raw group: (5
Raw group: -4)
Raw group: *2)
Raw group: )
Raw group: +9
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '5+(((5-4)*2))+9'
Raw group: 5
Raw group: +(
Raw group: (
Raw group: (5
Raw group: -4)
Raw group: *2)
Raw group: )
Raw group: +9
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:30:33+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '5+(((5-4)*2))+9'
Raw group: 5
Raw group: +(
Raw group: (
Raw group: (5
Raw group: -4)
Raw group: *2)
Raw group: )
Raw group: +9
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="RedundantBrackets">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4+(2d6)+(9)'
Raw group: 4
Raw group: +(2d6)
Raw group: +(9)
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4+(2d6)+(9)'
Raw group: 4
Raw group: +(2d6)
Raw group: +(9)
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '4+(2d6)+(9)'
Raw group: 4
Raw group: +(2d6)
Raw group: +(9)
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                    <TestRecord Name="InvalidSpecWithTwoDCharacters">
                      <Results>
                        <UnitTestResult>
                          <TestDate>2009-04-01T16:24:10+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10d6d8'
Raw group: 10d6
Raw group: d8
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T21:18:54+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10d6d8'
Raw group: 10d6
Raw group: d8
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:27:16+01:00</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput>
1 rolls, spec: '10d6d8'
Raw group: 10d6
Raw group: d8
</ConsoleOutput>
                          <ConsoleError />
                        </UnitTestResult>
                        <UnitTestResult>
                          <TestDate>2009-04-01T23:56:38</TestDate>
                          <Status>Success</Status>
                          <TotalFailures>0</TotalFailures>
                          <TotalSuccess>1</TotalSuccess>
                          <TotalIgnored>0</TotalIgnored>
                          <Time />
                          <ConsoleOutput />
                          <ConsoleError />
                        </UnitTestResult>
                      </Results>
                      <Tests />
                    </TestRecord>
                  </Tests>
                </TestRecord>
              </Tests>
            </TestRecord>
          </Tests>
        </TestRecord>
      </Tests>
    </TestRecord>
  </Tests>
</TestRecord>